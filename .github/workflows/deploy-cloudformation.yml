name: Deploy CloudFormation Stack

on:
  push:
    branches:
      - main  # Adjust the branch name as needed
  pull_request:
    branches:
      - main  # Adjust to target branches where PRs are merged
  workflow_dispatch:  # Allows manual triggers from GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check if the CloudFormation stack exists
        id: check_stack
        run: |
          STACK_NAME="ec2-hello-world-stack"
          EXISTING_STACK=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text || echo "DOES_NOT_EXIST")
          echo "stack_status=$EXISTING_STACK" >> $GITHUB_ENV

      - name: Delete existing stack if it exists
        if: env.stack_status != 'DOES_NOT_EXIST'
        run: |
          echo "Deleting existing stack..."
          aws cloudformation delete-stack --stack-name ec2-hello-world-stack
          aws cloudformation wait stack-delete-complete --stack-name ec2-hello-world-stack

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation create-stack --stack-name ec2-hello-world-stack --template-body file://webpage_ec2_cf.yaml
          aws cloudformation wait stack-create-complete --stack-name ec2-hello-world-stack

      - name: Get the public URL of the deployed EC2 instance
        id: get_url
        run: |
          STACK_OUTPUT=$(aws cloudformation describe-stacks --stack-name ec2-hello-world-stack --query 'Stacks[0].Outputs[?OutputKey==`WebsiteURL`].OutputValue' --output text)
          echo "Webpage URL: $STACK_OUTPUT"
          echo "webpage_url=$STACK_OUTPUT" >> $GITHUB_ENV

      - name: Smoke test the webpage
        run: |
          URL="${{ env.webpage_url }}"
          END_TIME=$((SECONDS + 180))
          while [ $SECONDS -lt $END_TIME ]; do
            STATUS=$(curl -o /dev/null -s -w "%{http_code}" "$URL")
            if [ "$STATUS" -eq 200 ]; then
              echo "Webpage is up and returned 200 OK."
              exit 0
            fi
            # Random sleep between 1 to 10 seconds
            SLEEP_DURATION=$(( (RANDOM % 10) + 1 ))
            echo "Status: $STATUS. Retrying in $SLEEP_DURATION seconds..."
            sleep $SLEEP_DURATION
          done
          echo "Webpage did not return 200 OK within the time limit."
          exit 1
